'''
EquiLeader
Find the index S such that the leaders of the sequences A[0], A[1], ..., A[S] 
and A[S + 1], A[S + 2], ..., A[N - 1] are the same.


A non-empty array A consisting of N integers is given.

The leader of this array is the value that occurs in more than half of the elements of A.

An equi leader is an index S such that 0 ≤ S < N − 1 and two sequences A[0], A[1], ..., A[S] and 
A[S + 1], A[S + 2], ..., A[N − 1] have leaders of the same value.

For example, given array A such that:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
we can find two equi leaders:

0, because sequences: (4) and (3, 4, 4, 4, 2) have the same leader, whose value is 4.
2, because sequences: (4, 3, 4) and (4, 4, 2) have the same leader, whose value is 4.
The goal is to count the number of equi leaders.

Write a function:

def solution(A)

that, given a non-empty array A consisting of N integers, returns the number of equi leaders.

For example, given:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
the function should return 2, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].

'''


def S(A):
    N = len(A)
    
    class LeadCounter(object):
        def __init__(self, value):
            self.value = value
            self.count = 0
            self.index = []
        def add(self, index):
            self.count += 1
            self.index.append(index)

    if N == 1:
        return 0

    D = {}
    for i in range(N):
        if A[i] not in D.keys():
            d = LeadCounter(A[i])
            d.add(i)
            D[A[i]] = d
        else:    # exist
            d = D[A[i]]
            d.add(i)

    lead_counter = None
    for d in D.values():
        if d.count > int(N/2):
            lead_counter = d
            break
    if not lead_counter:
        return 0
    
    L = len(lead_counter.index)
    if L < 2:
        return 0

    print(lead_counter.index)

    ecount = 0   # counter for equileader
    lcount = 0   # counter for leader 
    for i in range(N):
        if i in lead_counter.index:
            lcount += 1
        if (lcount > int((i+1)/2)) and \
           (L-lcount > int((N-i-1)/2)):   # found one equiLeader
            ecount += 1
    return ecount



# Task Score: 44%, Correctness: 60%, Performance: 25%
#   correctness:  silly mistake about iteration index
#   performance issue.
#   time complexity:  O(N ** 2)
def S1(A):
    N = len(A)
    
    class LeadCounter(object):
        def __init__(self, value):
            self.value = value
            self.count = 0
            self.index = []
        def add(self, index):
            self.count += 1
            self.index.append(index)

    if N == 1:
        return 0

    D = {}
    for i in range(N):
        if A[i] not in D.keys():
            d = LeadCounter(A[i])
            d.add(i)
            D[A[i]] = d
        else:    # exist
            d = D[A[i]]
            d.add(i)

    lead_counter = None
    for d in D.values():
        if d.count > int(N/2):
            lead_counter = d
            break
    if not lead_counter:
        return 0
    
    L = len(lead_counter.index)
    if L < 2:
        return 0

    print(lead_counter.index)

    ecount = 0   # counter for equileader
    lcount = 0   # counter for leader 
    for i in range(L):                     # <<--- mistake: should iterate 1..N, not only L
        lcount += 1
        if (lcount > int((lead_counter.index[i]+1)/2)) and \
           (L-lcount > int((N-lead_counter.index[i]-1)/2)):   # found one equiLeader
            ecount += 1
    return ecount
    



def solution(A):
    return S(A)

if __name__ == "__main__":

    sample = [ 
        [4, 4, 2, 5, 3, 4, 4, 4], # 3
        [4, 3, 4, 4, 4, 2],  # 2
        [3],           # 0
        [1,1],         # 1
        [1,2,1],       # 0
        [1,1,1,1],     # 3
        [3,1,1,2,1,1], # 2
        # failed testcase, expecting 3
        [4, 4, 2, 5, 3, 4, 4, 4], # 3
    ]

    for A in sample:
        print('-'*60)
        r = solution(A)
        print("{} -> {}".format(A, r))
