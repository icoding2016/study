- Puppet: 
  Refers to the product Puppet, the language Puppet, the entire Puppet ecosystem and also the name of the company that wrote the software.

- Puppet Master: 
  A Puppet Master is an installation of Puppet where Puppet code is compiled, and also where SSL certs are verified and signed. Also known as a "Compile Master". In a "monolithic" Puppet Master installation in Puppet Enterprise, the Puppet Master also runs the Puppet Console and PuppetDB. In a "split" installation, the Master, Console and PuppetDB functionality run on different nodes.

- Puppet Server: 
  The Puppet Server is an application that runs on the Java Virtual Machine (JVM) on the Puppet Master. In addition to hosting endpoints for the certificate authority service, it also powers the catalog compiler, which compiles configuration catalogs for agent nodes, using Puppet code and various other data sources.

If you like, the "Puppet Server" is the implementation of a Puppet Master, which is more like an abstract role


============================================
[sandbox environment & setup]

vagrant/virtualbox 
install vagrant and virtualbox


Setup VagrantBox: https://app.vagrantup.com/boxes/search
	vagrant box add <box-name>
	e.g. pick ubuntu/xenial64
		d:\VMs\vagrant
		λ vagrant box add ubuntu/xenial64                                                                                   
		==> box: Loading metadata for box 'ubuntu/xenial64'                                                                 
			box: URL: https://vagrantcloud.com/ubuntu/xenial64                                                              
		==> box: Adding box 'ubuntu/xenial64' (v20210928.0.0) for provider: virtualbox                                      
			box: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20210928.0.0/providers/virtualbox.box 

	vagrant init ubuntu/xenial64    # init the vagrant-box
	e.g
		d:\VMs\vagrant
		λ vagrant.exe init ubuntu/xenial64                                          
		A `Vagrantfile` has been placed in this directory. You are now ready to `vagrant up` your first virtual environment! 

	update the Vagrantfile with hostname etc.
		config.vm.box = "ubuntu/xenial64"
		config.vm.hostname = "master.puppet.vm"

		config.vm.provider "virtualbox" do |vb|
			# Display the VirtualBox GUI when booting the machine
			vb.gui = true
			#   # Customize the amount of memory on the VM:
			vb.memory = "1024"
		end
	
	vagrant up		# startup the vagrant box
	
	vagrant ssh		# ssh to the vb
	
	# then install puppet server, puppet client




Prepare Puppet master
How to Install Puppet on Ubuntu:
	Step 1: Update Package List.
	Step 2: Set Up Hostname Resolution.
	Step 3: Install Puppet Server on Master Node.
	Step 4: Install Puppet Agent on Client Node.
	Step 5: Sign Puppet Agent Certificate.

in the 'master host' (VM)
	# Enable the Puppet package repositories, 
	vagrant@master:~$ wget https://apt.puppet.com/puppet7-release-focal.deb
	vagrant@master:~$ sudo dpkg -i puppet7-release-focal.deb
	vagrant@master:~$ sudo apt update
	vagrant@master:~$ sudo apt install puppetserver
	
	vagrant@master:~$ sudo systemctl start puppetserver        # on VM this might fail, due to memory limit
	vagrant@master:~$ sudo journalctl -xesudo journalctl -xe
	  Oct 01 02:27:25 master systemd[1]: puppetserver.service: Failed with result 'start-limit-hit'.
	# to change the memory allocation for puppetserver
	vagrant@master:~$ sudo vim /etc/default/puppetserver
		JAVA_ARGS="-Xms2g -Xmx2g -Djruby.logger.class=com.puppetlabs.jruby_utils.jruby.Slf4jLogger"
		to
		JAVA_ARGS="-Xms256M -Xmx512M -Djruby.logger.class=com.puppetlabs.jruby_utils.jruby.Slf4jLogger"

	vagrant@master:~$ sudo systemctl start puppetserver
	vagrant@master:~$ sudo systemctl status puppetserver    # check
	vagrant@master:~$ sudo systemctl enable puppetserver    # enable the auto start ofr puppet
	
	# add puppet tool path in .bashrc
	vagrant@master:~$ sudo vim .bashrc
			PATH=$PATH:/opt/puppetlabs/bin/
	vagrant@master:~$ . .bashrc
	vagrant@master:~$ which puppet
	/opt/puppetlabs/bin//puppet

	# update hosts for the hostname
	sudo vim /etc/hosts
		127.0.0.1 localhost puppet master.puppet.vm
		# 127.0.2.1 master.puppet.vm master



=============================
Example

The default codebase:  /etc/puppetlabs/code/environments/production/
vagrant@master:~$ tree /etc/puppetlabs/code/environments/production/
	/etc/puppetlabs/code/environments/production/
	├── data
	├── environment.conf
	├── hiera.yaml
	├── manifests
	│   └── site.pp
	└── modules

add site.pp
	vagrant@master:~$ sudo vim /etc/puppetlabs/code/environments/production/manifests/site.pp
		e.g.
		node default {
		}

install modules in [<codebase>/modules]
	git
	puppetlabs-apt
	puppetlabs-mysql
	puppet-nginx
	puppet-php
	puppetlabs-apache
 
	e.g.  
	sudo apt install -y git
	sudo puppet module install puppet-nginx
	sudo puppet module install puppetlabs-mysql
	sudo puppet module install puppetlabs-apt

	tree /etc/puppet/ -L 3
	/etc/puppet/
	├── auth.conf
	├── code
	│   └── modules
	│       ├── apt
	│       ├── concat
	│       ├── mysql
	│       ├── nginx
	│       └── stdlib
	├── hiera.yaml
	└── puppet.conf


example:
	code
	├── manifests
	│   └── site.pp
	├── modules
	└── site
		└── webserver
			└── manifests
				└── init.pp
puppet apply /etc/puppetlabs/code//manifests/site.pp
	
	
==============================
control_repo


- puppetfile
A Puppetfile is a formatted text file that specifies the modules and data that you want brought into your control repo. 
 

===============================
[TOOLS]

r10k
puppetlabs/r10k: Smarter Puppet deployment

r10k is a code management tool that allows you to manage your environment configurations (such as production, testing, and development) in a source control repository. You must manually deploy code changes from your control repository using the r10k command line tool on your primary server and all compilers.


PDK (Puppet Development Kit)
 
 
===============================

https://forge.puppet.com/modules

puppet module install puppet-nginx --version       # install existing module from forg.puppet.com


dockeragent module (setup a dockers running agent, for exercise environments)

login to the docker nodes:
  docker exec -it <node_name> bash
  

================================
Use regex for maching node:
node /<regex>/ {        # e.g. node /^web/   match all nodes start with 'web'
}


=================================
prepare cert

on master, need to sign agents' cert so that agents can contact master

[master]
puppetserver ca list
puppetserver ca sign --certname <agent_node_name>


docker exec -it <agent_node_name> bash
[agent]
puppet agent -t



=============================
facter   

The tool on agent to collect the status information of agent.


 
=============================
Puppet code
  Module
	metadata.json     # module information (used by forge.puppet.com)
    /Manifests 
		One class per manifest.  (the class named after the module in init.pp)
	/files
		static files
	/templates
		dynamic templates
	/lib
		additional code
	/task
		Extemporary tasks
	readme.md




================================
Example: 
Task: Puppet for setting up minecraft server

Try Manual Steps of setting up minecraft server:

Puttet (repo):
# root level
Puppetfile		# the dependencies
	e.g.
	"
	mod 'puppetlabs-stdlib', '6.2.0'
	mod 'puppetlabs-apt', '7.3.0'
	mod 'puppetlabs-translate', '2.1.0'
	mod 'puppet-yum', '4.0.0'
	mod 'puppetlabs-concat', '6.1.0'
	mod 'puppetlabs-yumrepo_core', '1.0.4'
	mod 'elastic-elastic_stack', '7.0.0'
	"

environment.config
	e.g.
	"
	modulepath = site:modules:$basemodulepath
	"
	
manifests/
	site.pp      # main site config, define the nodes
		e.g
		"
		node default {
		}
		node 'master.puppet.vm' {
			include role::master_server
		}
		node /^web/ {
			include role::app_server
		}
		node /^db/ {
			include role::db_server
		}
		node 'minecraft_server.puppet.vm' {
			include role::minecraft_server
		}		
		"
site/
	profile/
		manifests/
			base.pp
			agent_nodes.pp
			app.pp
			web.pp
			db.pp
			ssh_server.pp
			minecraft.pp
				e.g.
				"
				class profile::minecraft {
					# include minecraft       # defined in the minecraft module
					class {'minecraft':
						install_root => '/opt/games',
					}
				}
				"
	role/
		manifests/
			master_server.pp
			app_server.pp
			db_server.pp
			minecraft_server.pp
				e.g.
				"
				class role::minecraft_server {
					include profile::base
					include profile::minecraft
				}
				"
				
	<module_name>/
		manifest/
			init.pp  
				"
				class <module_name> {
				}
				"
	minecraft/
		manifests/
			init.pp
				"
				class minecraft (
					$url = 'https://launcher.mojang.com/v1/objects/a16d67e5807f57fc4e550299cf20226194497dc2/server.jar'
					$install_root = '/opt/minecraft'
				)
				{
					file {"$install_root":
						ensure => directory,
					}
					file {"{$install_root}/minecraft_server.jar":
						ensure => file,
						source => $url,
						before => Service['minecraft'],
					}
					package {'java':
						ensure => present,
					}
					file {"{$install_root}/eula.txt":
						ensure => file,
						content => 'eula=true',
					}
					file {'/etc/systemd/system/minecraft.service':
						ensure => file,
						# source => 'puppet:///modules/minecraft/minecraft.service',   	# using static file
						content => epp('minecraft/minecraft.service', {					# use template file
							install_root => $install_root,
							}),
					}
					service {'minecraft':
						ensure => running,
						enable => true,
						require => [Package['java'], File["{$install_root}/eula.txt"], File['/etc/systemd/system/minecraft.service']],
					}
				}
				"
		templates/
			minecraft.service.epp     # a template file for minecraft service configuration
				"
				[Unit]
				Description=Minecraft Server
				
				Wants=network.target
				After=network.target
				
				[Service]
				WorkingDirectory=<%= $install_root  %>
				ExecStart=/usr/bin/java -Xmx512M -Xms32M -jar minecraft_server.jar nogui
				
				[Install]
				WantedBy=multi-user.target
				"
		files/
			minecraft.service     # a static file for minecraft service configuration
				"
				[Unit]
				Description=Minecraft Server
				
				Wants=network.target
				After=network.target
				
				[Service]
				WorkingDirectory=/opt/minecraft
				ExecStart=/usr/bin/java -Xmx512M -Xms32M -jar minecraft_server.jar nogui
				
				[Install]
				WantedBy=multi-user.target
				"
---------------

control the order	
  use before/after		
  

====================================  
  
sudo apt update
sudo apt install puppet

sudo apt install systemd
sudo apt install puppetmaster  # ??
  
puppet-apply - Apply Puppet manifests locally
puppet apply <pp file>



cd /etc/puppet/
cd modules
# install modules 
# if fail "Could not connect via HTTPS to https://forge.puppetlabs.com Unable to verify the SSL certificate", install ca-certificates first
sudo apt install ca-certificates
sudo puppet module install puppetlabs-apache
sudo puppet module install puppet-php

	puppetlabs-apt
	puppetlabs-mysql
	puppet-nginx
	puppet-php
	puppetlabs-apache


# install puppetserver
wget https://apt.puppet.com/puppet7-release-focal.deb
sudo dpkg -i puppet7-release-focal.deb
# sudo apt install -y curl
#sudo curl https://apt.puppetlabs.com/puppetlabs-release-pc1-xenia l.deb --output puppetlabs.deb
# sudo dpkg -i puppetlabs.deb

sudo apt update
[server]
sudo apt install puppetserver -y

[agent]
sudo apt install puppet-agent
sudo systemctl start puppet-agent
sudo systemctl enable pupet-agent




├── manifests
│   └── site.pp
├── modules
└── site
    └── webserver
        └── manifests
            └── init.pp






----------------------------------------------
misc


class apache ($disable = "false", $apacheconf = "default") {
  if $disable == "false" {
    $installed = present
    $enable = true
    $ensure = "running"
  } else {
    $installed = absent
    $enable = false
    $ensure = "stopped"
  }
  case $operatingsystem {
    'CentOS', 'RedHat': {
      if $architecture == "x86_64" {
        package { 'httpd':
          name   => "httpd.x86_64",
          ensure => $installed,
        }
      } else {
        package { 'httpd':
          name   => "httpd.i386",
          ensure => $installed,
        }
      }
      service { 'httpd':
        ensure => $ensure,
        enable => $enable,
      }
      file { "http.conf":
        path   => "/etc/httpd/conf/httpd.conf",
        owner  => root,
        group  => root,
        mode   => 0644,
        source => $apacheconf ? {
          'default' => "puppet:///modules/apache/httpd.conf",
        }
      }
    }  
  }
}

class apache::ssl ($disable = "false") {
  include apache

  if $disable == "false" {
    $installed = present
    $enable = true
    $ensure = "running"
  } else {
    $installed = absent
    $enable = false
    $ensure = "stopped"
  }

  case $operatingsystem {
    'CentOS', 'RedHat': {
      case $architecture {
        'x86_64': {
          package { 'mod_ssl':
            name   => "mod_ssl.x86_64",
            ensure => $installed,
            require => Package['httpd'],
          }
       }
        'i386':{
          package { 'mod_ssl':
            name   => "mod_ssl.i386",
            ensure => $installed,
            require => Package['httpd'],
          }
        }
      }
    }
  }
}

-----------------------------

cat manifests/site.pp
node default {
  include webserver
}

cat site/webserver/manifests/init.pp
class webserver {
  package {'apache2':
    ensure => installed,
  }
  exec { "apt-get update":
		command => "/usr/bin/apt-get update",
  }
  Exec["apt-update"] -> Package <| |>
  
  package {'php7.4':
    ensure => installed,
  }
  package {'mysql-server':
    ensure => installed,
  }
}



puppet module list

/etc/puppet.conf:

[master]
  manifest=$confdir/manifests/site.pp
  modulepath=$confdir/environments/$environment/modules:$confdir/modules

when importing a module it checks for directory-presence, rather than file-presence (init.pp).


puppet apply /etc/puppet/manifests/site.pp --modulepath=/etc/puppet/modules 
 
  
===============================
Resources:
- learn.puppet.com  

https://www.linkedin.com/learning/learning-puppet/install-your-puppet-master?u=2090948
https://www.youtube.com/watch?v=6ncaJxhdgLY
